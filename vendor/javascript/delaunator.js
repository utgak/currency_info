import{orient2d as t}from"robust-predicates";const s=Math.pow(2,-52);const i=new Uint32Array(512);class Delaunator{static from(t,s=defaultGetX,i=defaultGetY){const n=t.length;const e=new Float64Array(2*n);for(let h=0;h<n;h++){const n=t[h];e[2*h]=s(n);e[2*h+1]=i(n)}return new Delaunator(e)}constructor(t){const s=t.length>>1;if(s>0&&"number"!==typeof t[0])throw new Error("Expected coords to contain numbers.");this.coords=t;const i=Math.max(2*s-5,0);this._triangles=new Uint32Array(3*i);this._halfedges=new Int32Array(3*i);this._hashSize=Math.ceil(Math.sqrt(s));this._hullPrev=new Uint32Array(s);this._hullNext=new Uint32Array(s);this._hullTri=new Uint32Array(s);this._hullHash=new Int32Array(this._hashSize).fill(-1);this._ids=new Uint32Array(s);this._dists=new Float64Array(s);this.update()}update(){const{coords:i,_hullPrev:n,_hullNext:e,_hullTri:h,_hullHash:l}=this;const r=i.length>>1;let o=Infinity;let c=Infinity;let a=-Infinity;let u=-Infinity;for(let t=0;t<r;t++){const s=i[2*t];const n=i[2*t+1];s<o&&(o=s);n<c&&(c=n);s>a&&(a=s);n>u&&(u=n);this._ids[t]=t}const _=(o+a)/2;const f=(c+u)/2;let d=Infinity;let y,g,w;for(let t=0;t<r;t++){const s=dist(_,f,i[2*t],i[2*t+1]);if(s<d){y=t;d=s}}const k=i[2*y];const b=i[2*y+1];d=Infinity;for(let t=0;t<r;t++){if(t===y)continue;const s=dist(k,b,i[2*t],i[2*t+1]);if(s<d&&s>0){g=t;d=s}}let p=i[2*g];let A=i[2*g+1];let I=Infinity;for(let t=0;t<r;t++){if(t===y||t===g)continue;const s=circumradius(k,b,p,A,i[2*t],i[2*t+1]);if(s<I){w=t;I=s}}let S=i[2*w];let m=i[2*w+1];if(Infinity===I){for(let t=0;t<r;t++)this._dists[t]=i[2*t]-i[0]||i[2*t+1]-i[1];quicksort(this._ids,this._dists,0,r-1);const t=new Uint32Array(r);let s=0;for(let i=0,n=-Infinity;i<r;i++){const e=this._ids[i];if(this._dists[e]>n){t[s++]=e;n=this._dists[e]}}this.hull=t.subarray(0,s);this.triangles=new Uint32Array(0);this.halfedges=new Uint32Array(0);return}if(t(k,b,p,A,S,m)<0){const t=g;const s=p;const i=A;g=w;p=S;A=m;w=t;S=s;m=i}const x=circumcenter(k,b,p,A,S,m);this._cx=x.x;this._cy=x.y;for(let t=0;t<r;t++)this._dists[t]=dist(i[2*t],i[2*t+1],x.x,x.y);quicksort(this._ids,this._dists,0,r-1);this._hullStart=y;let z=3;e[y]=n[w]=g;e[g]=n[y]=w;e[w]=n[g]=y;h[y]=0;h[g]=1;h[w]=2;l.fill(-1);l[this._hashKey(k,b)]=y;l[this._hashKey(p,A)]=g;l[this._hashKey(S,m)]=w;this.trianglesLen=0;this._addTriangle(y,g,w,-1,-1,-1);for(let r,o,c=0;c<this._ids.length;c++){const a=this._ids[c];const u=i[2*a];const _=i[2*a+1];if(c>0&&Math.abs(u-r)<=s&&Math.abs(_-o)<=s)continue;r=u;o=_;if(a===y||a===g||a===w)continue;let f=0;for(let t=0,s=this._hashKey(u,_);t<this._hashSize;t++){f=l[(s+t)%this._hashSize];if(-1!==f&&f!==e[f])break}f=n[f];let d,k=f;while(d=e[k],t(u,_,i[2*k],i[2*k+1],i[2*d],i[2*d+1])>=0){k=d;if(k===f){k=-1;break}}if(-1===k)continue;let b=this._addTriangle(k,a,e[k],-1,-1,h[k]);h[a]=this._legalize(b+2);h[k]=b;z++;let p=e[k];while(d=e[p],t(u,_,i[2*p],i[2*p+1],i[2*d],i[2*d+1])<0){b=this._addTriangle(p,a,d,h[a],-1,h[p]);h[a]=this._legalize(b+2);e[p]=p;z--;p=d}if(k===f)while(d=n[k],t(u,_,i[2*d],i[2*d+1],i[2*k],i[2*k+1])<0){b=this._addTriangle(d,a,k,-1,h[k],h[d]);this._legalize(b+2);h[d]=b;e[k]=k;z--;k=d}this._hullStart=n[a]=k;e[k]=n[p]=a;e[a]=p;l[this._hashKey(u,_)]=a;l[this._hashKey(i[2*k],i[2*k+1])]=k}this.hull=new Uint32Array(z);for(let t=0,s=this._hullStart;t<z;t++){this.hull[t]=s;s=e[s]}this.triangles=this._triangles.subarray(0,this.trianglesLen);this.halfedges=this._halfedges.subarray(0,this.trianglesLen)}_hashKey(t,s){return Math.floor(pseudoAngle(t-this._cx,s-this._cy)*this._hashSize)%this._hashSize}_legalize(t){const{_triangles:s,_halfedges:n,coords:e}=this;let h=0;let l=0;while(true){const r=n[t];const o=t-t%3;l=o+(t+2)%3;if(-1===r){if(0===h)break;t=i[--h];continue}const c=r-r%3;const a=o+(t+1)%3;const u=c+(r+2)%3;const _=s[l];const f=s[t];const d=s[a];const y=s[u];const g=inCircle(e[2*_],e[2*_+1],e[2*f],e[2*f+1],e[2*d],e[2*d+1],e[2*y],e[2*y+1]);if(g){s[t]=y;s[r]=_;const e=n[u];if(-1===e){let s=this._hullStart;do{if(this._hullTri[s]===u){this._hullTri[s]=t;break}s=this._hullPrev[s]}while(s!==this._hullStart)}this._link(t,e);this._link(r,n[l]);this._link(l,u);const o=c+(r+1)%3;h<i.length&&(i[h++]=o)}else{if(0===h)break;t=i[--h]}}return l}_link(t,s){this._halfedges[t]=s;-1!==s&&(this._halfedges[s]=t)}_addTriangle(t,s,i,n,e,h){const l=this.trianglesLen;this._triangles[l]=t;this._triangles[l+1]=s;this._triangles[l+2]=i;this._link(l,n);this._link(l+1,e);this._link(l+2,h);this.trianglesLen+=3;return l}}function pseudoAngle(t,s){const i=t/(Math.abs(t)+Math.abs(s));return(s>0?3-i:1+i)/4}function dist(t,s,i,n){const e=t-i;const h=s-n;return e*e+h*h}function inCircle(t,s,i,n,e,h,l,r){const o=t-l;const c=s-r;const a=i-l;const u=n-r;const _=e-l;const f=h-r;const d=o*o+c*c;const y=a*a+u*u;const g=_*_+f*f;return o*(u*g-y*f)-c*(a*g-y*_)+d*(a*f-u*_)<0}function circumradius(t,s,i,n,e,h){const l=i-t;const r=n-s;const o=e-t;const c=h-s;const a=l*l+r*r;const u=o*o+c*c;const _=.5/(l*c-r*o);const f=(c*a-r*u)*_;const d=(l*u-o*a)*_;return f*f+d*d}function circumcenter(t,s,i,n,e,h){const l=i-t;const r=n-s;const o=e-t;const c=h-s;const a=l*l+r*r;const u=o*o+c*c;const _=.5/(l*c-r*o);const f=t+(c*a-r*u)*_;const d=s+(l*u-o*a)*_;return{x:f,y:d}}function quicksort(t,s,i,n){if(n-i<=20)for(let e=i+1;e<=n;e++){const n=t[e];const h=s[n];let l=e-1;while(l>=i&&s[t[l]]>h)t[l+1]=t[l--];t[l+1]=n}else{const e=i+n>>1;let h=i+1;let l=n;swap(t,e,h);s[t[i]]>s[t[n]]&&swap(t,i,n);s[t[h]]>s[t[n]]&&swap(t,h,n);s[t[i]]>s[t[h]]&&swap(t,i,h);const r=t[h];const o=s[r];while(true){do{h++}while(s[t[h]]<o);do{l--}while(s[t[l]]>o);if(l<h)break;swap(t,h,l)}t[i+1]=t[l];t[l]=r;if(n-h+1>=l-i){quicksort(t,s,h,n);quicksort(t,s,i,l-1)}else{quicksort(t,s,i,l-1);quicksort(t,s,h,n)}}}function swap(t,s,i){const n=t[s];t[s]=t[i];t[i]=n}function defaultGetX(t){return t[0]}function defaultGetY(t){return t[1]}export default Delaunator;

